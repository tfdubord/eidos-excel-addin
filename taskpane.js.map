{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/config-classes.ts","webpack://office-addin-taskpane/./src/taskpane/utils.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"/> <title>Eidos Excel Helpers</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-Fabric\\\"> <header> <nav> <ul class=\\\"nav__list\\\"> <li><a href=\\\"#\\\" id=\\\"nav__list-setup\\\" class=\\\"nav__link nav-active\\\">Setup</a></li> <li><a href=\\\"#\\\" id=\\\"nav__list-make\\\" class=\\\"nav__link\\\">Make</a></li> <li><a href=\\\"#\\\" id=\\\"nav__list-help\\\" class=\\\"nav__link\\\">Help</a></li> </ul> </nav> </header> <main> <div class=\\\"panel\\\" id=\\\"setup-panel\\\"> <h2>Setup Template</h2> <ol> <li> Create the template sheets. <p> <button id=\\\"btnBuildTemp\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Create Template</span> </button> </p> </li> <li>Populate the TagsIn sheet from PLC tag export.</li> <li> Use the Get Unique DTs button to generate a list of data-types from your TagsIn sheet. <p> <button id=\\\"btnGetUnique\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Get Unique DTs</span> </button> </p> </li> <li> Defining which members (.members) you want to include for each data type by filling in in Column B. Separate out multiple members with semicolons (.PV;.SP). </li> <li> Then generate the expanded tag list with this button. <p> <button id=\\\"btnBuildTags\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Build Tag List</span> </button> </p> </li> </ol> <h3>Data Mapping</h3> <p>Now organize your tag list. Start by making a TagList and TagMap sheet.</p> <label for=\\\"txtTS\\\">Tag Source / Sheet:</label><br/> <input type=\\\"text\\\" id=\\\"txtTS\\\" name=\\\"tagSource\\\" value=\\\"TS\\\"/><br/> <button id=\\\"btnCreateMap\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Create List and Map</span> </button> </div> <div class=\\\"panel\\\" id=\\\"make-panel\\\"> <h2>Generate Files</h2> <p>Once your map has been created, generate Eidos JSON files.</p> <button id=\\\"btnCreateFile\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Create File<br>Once your map has been created, generate Eidos JSON files</span> </button> <div id=\\\"downloads\\\"></div> </div> </main> <div class=\\\"log__panel\\\"> <p class=\\\"log__label\\\">Output Log</p> <div id=\\\"log__text\\\"> <pre id=\\\"log\\\"></pre> </div> </div> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","export interface ITag {\r\n  Name: string;\r\n  Type: string;\r\n  Address: number;\r\n}\r\n\r\nexport interface ITagString {\r\n  Name: string;\r\n  Type: string;\r\n  Address: number;\r\n  Length: number;\r\n}\r\n\r\nexport interface ITagBool {\r\n  Name: string;\r\n  Type: string;\r\n  Address: number;\r\n  BitAddress: number;\r\n}\r\n\r\nexport enum TagTypeNumeric {\r\n  Real = \"REAL\",\r\n  Sint = \"SINT\",\r\n  Int = \"INT\",\r\n  Dint = \"DINT\",\r\n  Lint = \"LINT\",\r\n}\r\n\r\n/** Tag group object */\r\nexport class TagGroup {\r\n  Name: string;\r\n  Type: number;\r\n  Tags: (ITag | ITagBool | ITagString)[];\r\n  _validTypes: string[];\r\n\r\n  constructor(name: string) {\r\n    this.Name = name;\r\n    this.Type = 1;\r\n    this.Tags = new Array();\r\n  }\r\n  /** Add tags to group */\r\n  addNumericTag(name: string, type: string, address: number) {\r\n    const newTag: ITag = {\r\n      Name: name,\r\n      Type: type,\r\n      Address: address,\r\n    };\r\n    this.Tags.push(newTag);\r\n  }\r\n\r\n  addStringTag(name: string, address: number, length: number) {\r\n    const newTag: ITagString = {\r\n      Name: name,\r\n      Type: \"STRING\",\r\n      Address: address,\r\n      Length: length,\r\n    };\r\n    this.Tags.push(newTag);\r\n  }\r\n\r\n  addBoolTag(name: string, address: number, bitAddress: number) {\r\n    const newTag: ITagBool = {\r\n      Name: name,\r\n      Type: \"BOOL\",\r\n      Address: address,\r\n      BitAddress: bitAddress,\r\n    };\r\n    this.Tags.push(newTag);\r\n  }\r\n}\r\n\r\n/** Represents a tag source object (file) */\r\nexport class TagSource {\r\n  Name: string;\r\n  TagGroups: TagGroup[];\r\n\r\n  constructor(name: string) {\r\n    this.Name = name;\r\n    this.TagGroups = new Array();\r\n  }\r\n}\r\n\r\n/** Datasource type enums */\r\nexport enum DataSourceType {\r\n  Continuous = \"Continuous\",\r\n  TriggeredChannels = \"TriggeredChannels\",\r\n  TriggeredSet = \"TriggeredSet\",\r\n  Duration = \"Duration\",\r\n  FaultStack = \"FaultStack\",\r\n}\r\n\r\n/** Trigger object */\r\nexport interface Trigger {\r\n  Tag: string;\r\n  Type: string;\r\n  Latch: boolean;\r\n}\r\n\r\n/** Data channel object */\r\nexport class DataChannel {\r\n  Name: string;\r\n  Tag: string;\r\n  Trigger?: Trigger;\r\n  ValueDictionary?: object;\r\n\r\n  constructor(name: string, tag: string) {\r\n    this.Name = name;\r\n    this.Tag = tag;\r\n  }\r\n  /** Add value dictionary from object */\r\n  addValueDictionary(valueDictionary: object) {\r\n    // NEED ERROR CHECKING??\r\n    this.ValueDictionary = valueDictionary;\r\n  }\r\n}\r\n\r\n/** Represents a data source object (file) */\r\nexport class DataSource {\r\n  Name: string;\r\n  UseLegacyDataTypes = false;\r\n  Type: string;\r\n  TagSource: string;\r\n  ServerAddress: string;\r\n  ServerPort: number;\r\n  Database: string;\r\n  Table: string;\r\n  ShiftSchedule?: object;\r\n  StaticMetadata?: object;\r\n  DataChannels: DataChannel[];\r\n  MetadataChannels: DataChannel[];\r\n\r\n  constructor(\r\n    name: string,\r\n    sourceType: string,\r\n    tagSource: string,\r\n    serverAddress: string,\r\n    dbName: string,\r\n    table: string\r\n  ) {\r\n    this.Name = name;\r\n    this.Type = sourceType;\r\n    this.TagSource = tagSource;\r\n    this.ServerAddress = serverAddress;\r\n    this.ServerPort = 65400;\r\n    this.Database = dbName;\r\n    this.Table = table;\r\n    this.DataChannels = new Array();\r\n    this.MetadataChannels = new Array();\r\n  }\r\n  /** Add hard-coded shift schedule as default */\r\n  addDefaultShiftData() {\r\n    this.ShiftSchedule = {\r\n      Shifts: [\r\n        {\r\n          Name: \"Shift 1\",\r\n          Start: \"07:00:00\",\r\n          End: \"15:00:00\",\r\n        },\r\n        {\r\n          Name: \"Shift 2\",\r\n          Start: \"15:00:00\",\r\n          End: \"23:00:00\",\r\n        },\r\n        {\r\n          Name: \"Shift 3\",\r\n          Start: \"-01:00:00\",\r\n          End: \"07:00:00\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  /** Add shift schedule data from string input\r\n   * @todo NEED ERROR CHECKING\r\n   */\r\n  addShiftSchedule(shiftSchedule: string) {\r\n    this.ShiftSchedule = JSON.parse(shiftSchedule);\r\n  }\r\n\r\n  /** Add data channel to object\r\n   * @todo NEED ERROR CHECKING\r\n   * @todo Add triggered channels work\r\n   */\r\n  addDataChannel(name: string, tag: string, valueDict?: object) {\r\n    const dataChannel = new DataChannel(name, tag);\r\n    valueDict ? dataChannel.addValueDictionary(valueDict) : null; /** @todo Verify code */\r\n    this.DataChannels.push(dataChannel);\r\n  }\r\n\r\n  /** Add metadata channel to object\r\n   * @todo NEED ERROR CHECKING\r\n   */\r\n  addMetadataChannel(dataChannel: DataChannel) {\r\n    this.MetadataChannels.push(dataChannel);\r\n  }\r\n}\r\n","/* global document console*/\r\n\r\n/** Test for membership in a type */\r\nexport class Util {\r\n  static inEnum<T>(type: T, test: string | number): boolean {\r\n    return Object.values(type).includes(test as T);\r\n  }\r\n}\r\n\r\n/** Log entry to DOM element */\r\nexport function addToLog(elementId: string, logText: any) {\r\n  const logger = document.getElementById(elementId);\r\n  if (typeof logText == \"object\") {\r\n    logger.innerHTML += (JSON && JSON.stringify ? JSON.stringify(logText, undefined, 2) : logText) + \"<br />\";\r\n  } else {\r\n    logger.innerHTML += logText + \"<br />\";\r\n  }\r\n}\r\n\r\nexport function showSetupPanel() {\r\n  document.getElementById(\"setup-panel\").style.display = \"block\";\r\n  document.getElementById(\"make-panel\").style.display = \"none\";\r\n  document.getElementById(\"nav__list-setup\").className = \"nav__link nav-active\";\r\n  document.getElementById(\"nav__list-make\").className = \"nav__link\";\r\n}\r\n\r\nexport function showMakePanel() {\r\n  document.getElementById(\"setup-panel\").style.display = \"none\";\r\n  document.getElementById(\"make-panel\").style.display = \"flex\";\r\n  document.getElementById(\"nav__list-make\").className = \"nav__link nav-active\";\r\n  document.getElementById(\"nav__list-setup\").className = \"nav__link\";\r\n\r\n  const linkElems = document.querySelectorAll(\"a.nav__link\");\r\n  console.log(linkElems);\r\n  linkElems.forEach((link) => {\r\n    link.className = \"nav__link\";\r\n  });\r\n}\r\n\r\nexport function selectNavMenu(navElemId: string, paneltoShowId: string) {\r\n  const linkElems = document.querySelectorAll(\"a.nav__link\");\r\n  console.log(linkElems);\r\n  linkElems.forEach((link) => {\r\n    if (link.id == navElemId) {\r\n      link.className = \"nav__link nav-active\";\r\n    } else {\r\n      link.className = \"nav__link\";\r\n    }\r\n  });\r\n\r\n  const panelELems = document.querySelectorAll(\"div.panel\");\r\n  panelELems.forEach((panel) => {\r\n    if (panel.id == paneltoShowId) {\r\n      panel.style.display = \"flex\";\r\n    } else {\r\n      panel.style.display = \"none\";\r\n    }\r\n  });\r\n}\r\n","/*\n * Copyright (c) Solventum Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\nimport * as eidosConfig from \"./config-classes\";\nimport { addToLog, selectNavMenu } from \"./utils\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    /* Use the following to enable/disable sections before load\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    */\n    document.getElementById(\"btnCreateMap\").onclick = () => addMapSheet(\"Ex\");\n    document.getElementById(\"btnCreateFile\").onclick = makeConfigs;\n    document.getElementById(\"nav__list-setup\").onclick = () => selectNavMenu(\"nav__list-setup\", \"setup-panel\");\n    document.getElementById(\"nav__list-make\").onclick = () => selectNavMenu(\"nav__list-make\", \"make-panel\");\n    document.getElementById(\"nav__list-help\").onclick = () => selectNavMenu(\"nav__list-help\", \"help-panel\");\n  }\n});\n\n/** Set configuration data parameters */\nconst CONFIG_SHEET = \"CONFIG\";\nconst CONFIG_RANGE = \"A2:C6\";\nconst DATASOURCE_TABLE = \"DS_Table\"; // Table names cannot contain certain chars\nconst TAGMAP_PREFIX = \"TagsMap_\";\nconst DATATYPES = \"BOOL,SINT,INT,DINT,REAL,STRING\";\nconst LOG_ELEMENT = \"log\";\n\nenum LogicType {\n  StructuredText = \"ST\",\n  Ladder = \"LAD\",\n}\n\nenum TagNameFormat {\n  Integer = \"I\",\n  Byte = \"B\",\n}\n\n/** Basic configuration information for Eidos project */\ninterface IConfigData {\n  TagSourceName: string;\n  ServerAddress: string;\n  DatabaseName: string;\n  LogicType: string;\n  TagNameFormat: string;\n}\n\n/** Create config file package from Excel data */\nfunction makeConfigs() {\n  getConfigData(CONFIG_SHEET, CONFIG_RANGE).then(function (configData) {\n    // If return isn't null, continue with parsing\n    if (configData) {\n      const tagsource = makeTagSourceObject(configData);\n      makeDatasourceObjects(DATASOURCE_TABLE, configData).then(function (datasources) {\n        populateSources(tagsource, datasources, configData).then(function () {\n          makeFiles4Download(tagsource, datasources);\n        });\n      });\n    }\n  });\n}\n\nasync function addConfigSheet() {\n  await Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const sheet = sheets.add(CONFIG_SHEET);\n\n    // Add data into cells\n    const cellData = [\n      [\"Tag Source Name\", \"tag-source-name\", \"<< this will also be used as the output file prefix\"],\n      [\"Server Address\", \"server-name.x.com\", \"<< port is hard-coded to EIDOS default of 65400\"],\n      [\"Database Name\", \"database-name\", \"<< Influx database name\"],\n      [\"Logic Type\", \"ST\", \"<< ST or LAD\"],\n      [\"Tag Name Format\", \"B\", \"<< byte (B) or index (I)\"],\n    ];\n\n    const configCells = sheet.getRange(CONFIG_RANGE);\n    configCells.values = cellData;\n    configCells.format.autofitColumns();\n\n    const datasourceTable = sheet.tables.add(\"A9:G10\", true);\n    datasourceTable.name = DATASOURCE_TABLE;\n    datasourceTable.style = \"TableStyleLight1\";\n\n    datasourceTable.getHeaderRowRange().values = [\n      [\"Name\", \"Table\", \"Type\", \"Trigger\", \"ShiftSchedule\", \"MetadataChannels\", \"StaticMetadata\"],\n    ];\n    datasourceTable.getDataBodyRange().values = [[\"\", \"\", \"Continuous\", \"\", \"\", \"\", \"\"]];\n    await context.sync();\n\n    console.log(`Added ${CONFIG_SHEET} worksheet`);\n  });\n}\n\n/** Adds a tag map sheet */\nasync function addMapSheet(tagNamePrefix: string) {\n  // Define style properties of Heading 1 and 2\n  const PROPS_H1: Excel.Interfaces.RangeFormatUpdateData = {\n    horizontalAlignment: \"Center\",\n    font: {\n      bold: true,\n      size: 13,\n    },\n    fill: {\n      color: \"#FFC000\",\n    },\n  };\n  const PROPS_H2: Excel.Interfaces.RangeFormatUpdateData = {\n    horizontalAlignment: \"Left\",\n    font: {\n      bold: true,\n      size: 11,\n      color: \"White\",\n    },\n    fill: {\n      color: \"#1F4E78\",\n    },\n  };\n\n  await Excel.run(async (context) => {\n    const newSheetName = \"TagsMap_\" + tagNamePrefix;\n\n    // Try to reference an existing sheeet\n    let sheet = context.workbook.worksheets.getItemOrNullObject(newSheetName);\n    await context.sync();\n\n    // If sheet doesn't exist, add it to the workbook and create table\n    if (sheet.isNullObject) {\n      sheet = context.workbook.worksheets.add(newSheetName);\n\n      const datamapTable = sheet.tables.add(\"A2:H2\", true /*hasHeaders*/);\n      datamapTable.showBandedRows = false;\n\n      datamapTable.getHeaderRowRange().values = [\n        [\"Byte\", \"Bit\", \"Eidos Chan Name\", \"Table\", \"Data Type\", \"Source Data\", \"Index PLC\", \"Bit PLC\"],\n      ];\n\n      let bodyData = [];\n      for (let i = 0; i < 125; i++) {\n        bodyData.push([i * 4, \"\", \"\", \"\", \"\", \"\", i, \"\"]);\n      }\n      datamapTable.rows.add(null /*add at the end*/, bodyData);\n\n      const dataTypeColumn = datamapTable.getDataBodyRange().getColumn(4);\n      dataTypeColumn.dataValidation.rule = {\n        list: {\n          inCellDropDown: true,\n          source: DATATYPES,\n        },\n      };\n\n      sheet.activate();\n\n      // Format tab and cells\n      sheet.tabColor = \"Green\";\n      datamapTable.getHeaderRowRange().format.set(PROPS_H2);\n\n      let headerRange = datamapTable.getHeaderRowRange();\n\n      let colWidths = [30, 30, 160, 120, 50, 160, 30, 30];\n      for (let i = 0; i < colWidths.length; i++) {\n        headerRange.getColumn(i).format.columnWidth = colWidths[i];\n      }\n\n      // Set sheet header formats and values\n      let eidosLabelCell = sheet.getRange(\"A1\");\n      eidosLabelCell.values = [[\"EIDOS STUFF\"]];\n      eidosLabelCell.format.set(PROPS_H1);\n      sheet.getRange(\"A1:C1\").merge();\n\n      sheet.getRange(\"D1\").values = [[\"TAG_ARRAY_NAME\"]];\n\n      let tagArrayTypeCell = sheet.getRange(\"E1\");\n      tagArrayTypeCell.values = [[\"REAL\"]];\n      tagArrayTypeCell.format.set(PROPS_H1);\n      tagArrayTypeCell.format.fill.color = \"#AEAAAA\";\n      tagArrayTypeCell.dataValidation.rule = {\n        list: {\n          inCellDropDown: true,\n          source: \"DINT,REAL,UDT\",\n        },\n      };\n\n      let plcLabelCell = sheet.getRange(\"F1\");\n      plcLabelCell.values = [[\"PLC STUFF\"]];\n      plcLabelCell.format.set(PROPS_H1);\n      sheet.getRange(\"F1:H1\").merge();\n\n      console.log(\"TagsMap template sheet created\");\n      addToLog(LOG_ELEMENT, \"TagsMap template sheet created\");\n    } else addToLog(LOG_ELEMENT, \"WARNING: TagsMap sheet already exists\");\n  });\n}\n\n/** Get configuration data from Excel range */\nasync function getConfigData(excelSheetName: string, excelRangeName: string): Promise<IConfigData> {\n  let result = await Excel.run(async (context) => {\n    const configSheet = context.workbook.worksheets.getItemOrNullObject(excelSheetName);\n    await context.sync();\n\n    if (configSheet.isNullObject) {\n      console.log(\"Cannot find CONFIG sheet\");\n      await addConfigSheet();\n      await addMapSheet(\"EX\");\n      return null;\n    } else {\n      let configRange = configSheet.getRange(excelRangeName).load([\"values\"]);\n      await context.sync();\n\n      const configData: IConfigData = {\n        TagSourceName: configRange.values[0][1],\n        ServerAddress: configRange.values[1][1],\n        DatabaseName: configRange.values[2][1],\n        LogicType: configRange.values[3][1],\n        TagNameFormat: configRange.values[4][1],\n      };\n      return configData;\n    }\n  });\n  // Return result of Excel arrow function\n  return result;\n}\n\n/** Create ONE tag source object */\nfunction makeTagSourceObject(configData: IConfigData): eidosConfig.TagSource {\n  const tagSource = new eidosConfig.TagSource(configData.TagSourceName);\n  return tagSource;\n}\n\n/** Create dataset objects from Excel table */\nasync function makeDatasourceObjects(\n  excelTableName: string,\n  configData: IConfigData\n): Promise<eidosConfig.DataSource[]> {\n  // Create variable to store all datasources\n  const datasources: eidosConfig.DataSource[] = new Array();\n\n  await Excel.run(async (context) => {\n    // Get table data from workbook\n    const datasourceTable = context.workbook.tables.getItem(excelTableName);\n\n    const headerRange = datasourceTable.getHeaderRowRange().load(\"values\");\n    const bodyRange = datasourceTable.getDataBodyRange().load(\"values\");\n\n    await datasourceTable.context.sync();\n\n    const headerValues = headerRange.values;\n    const bodyValues = bodyRange.values;\n\n    // Map column names with indexes to reference data\n    const tableColumnMap = {};\n    headerValues[0].forEach((item, index) => {\n      tableColumnMap[item] = index;\n    });\n\n    // Convert spreadsheet cells to object\n    bodyValues.forEach((element) => {\n      const name = element[tableColumnMap[\"Name\"]];\n      const table = element[tableColumnMap[\"Table\"]];\n      const type = element[tableColumnMap[\"Type\"]];\n      const shiftSchedule = element[tableColumnMap[\"ShiftSchedule\"]];\n      const metadataChannels = element[tableColumnMap[\"MetadataChannels\"]];\n      const staticmetaChannels = element[tableColumnMap[\"StaticMetadata\"]];\n\n      const newDatasource = new eidosConfig.DataSource(\n        name,\n        type,\n        configData.TagSourceName,\n        configData.ServerAddress,\n        configData.DatabaseName,\n        table\n      );\n\n      // Try to parse metadata cells\n      try {\n        const metadataObj = JSON.parse(metadataChannels);\n        newDatasource.MetadataChannels.push(metadataObj);\n\n        const staticdataObj = JSON.parse(staticmetaChannels);\n        newDatasource.StaticMetadata = staticdataObj;\n      } catch (error) {\n        console.error(error);\n      }\n\n      if (shiftSchedule) {\n        newDatasource.addShiftSchedule(shiftSchedule);\n      }\n      datasources.push(newDatasource);\n    });\n  });\n  return datasources;\n}\n\n/** Populate tagsource and datasource objects with data from each sheet */\nasync function populateSources(\n  tagSource: eidosConfig.TagSource,\n  dataSources: eidosConfig.DataSource[],\n  configData: IConfigData\n) {\n  await Excel.run(async (context) => {\n    // Find all TagsMap sheets\n    let sheets = context.workbook.worksheets;\n    sheets.load(\"items/name\");\n    await context.sync();\n\n    // Iterate through worksheets - if the sheet name contains the\n    //  matching string, process the data in the sheet.\n    for (const sheet of sheets.items) {\n      if (sheet.name.includes(TAGMAP_PREFIX)) {\n        console.log(`Processing ${sheet.name}`);\n\n        await loadData(configData, sheet, dataSources);\n      }\n    }\n\n    console.log(\"Parse complete - object result:\");\n    console.log(tagSource);\n    console.log(dataSources);\n\n    /** Parse worksheet and load data into source objects */\n    async function loadData(configData: IConfigData, sheet: Excel.Worksheet, dataSources: eidosConfig.DataSource[]) {\n      // Make sure at least 1 table exists on sheet\n      sheet.tables.load(\"count\");\n      await context.sync();\n      if (sheet.tables.count == 0) {\n        console.log(\"Error: No table found on sheet\");\n        return;\n      }\n      // Read data from sheet\n      const dataMapTable = sheet.tables.getItemAt(0);\n      const tableData = dataMapTable.getDataBodyRange().load(\"values\");\n      const sheetConfig = sheet.getRange(\"D1:E1\").load(\"values\");\n\n      await context.sync();\n\n      const baseTagName = sheetConfig.values[0][0]; // \"EIDOS_DINT1\";\n      const sArrayType = sheetConfig.values[0][1]; //\"REAL\";\n      const tagGroup = new eidosConfig.TagGroup(baseTagName);\n\n      type MapRow = {\n        Byte: number;\n        Bit: number;\n        ChannelName: string;\n        DataSource: string;\n        TagType: string;\n        PlcTagName: string;\n        PlcTagIndex: number;\n        PlcTagBit: number;\n        IsBool?: boolean;\n      };\n\n      /** Loop through each row - add them to the tagSource and dataSource objects */\n      for (let row of tableData.values) {\n        // Populate object\n        const tagData: MapRow = {\n          Byte: row[0],\n          Bit: row[1],\n          ChannelName: row[2],\n          DataSource: row[3],\n          TagType: row[4],\n          PlcTagName: row[5],\n          PlcTagIndex: row[6],\n          PlcTagBit: row[7],\n        };\n\n        tagData.IsBool = Number.isFinite(tagData.Bit) ? true : false;\n\n        // Only valid row if channel name isn't empty\n        if (tagData.ChannelName) {\n          // Build tag name based on type\n          const sTagName =\n            configData.TagNameFormat === TagNameFormat.Byte && tagData.IsBool\n              ? `${baseTagName}[${tagData.Byte}].${tagData.Bit}`\n              : configData.TagNameFormat === TagNameFormat.Byte && !tagData.IsBool\n              ? `${baseTagName}[${tagData.Byte}]`\n              : configData.TagNameFormat === TagNameFormat.Integer && tagData.IsBool\n              ? `${baseTagName}[${tagData.PlcTagIndex}].${tagData.PlcTagBit}`\n              : configData.TagNameFormat === TagNameFormat.Integer && !tagData.IsBool\n              ? `${baseTagName}[${tagData.PlcTagIndex}]`\n              : `${baseTagName}[${tagData.PlcTagIndex}]`;\n\n          tagData.IsBool\n            ? tagGroup.addBoolTag(sTagName, tagData.Byte, tagData.Bit)\n            : tagGroup.addNumericTag(sTagName, tagData.TagType, tagData.Byte);\n\n          // Add channel to data source object\n          const findIndex = dataSources.findIndex((i) => i.Name === tagData.DataSource);\n          if (findIndex != -1) {\n            dataSources[findIndex].addDataChannel(tagData.ChannelName, sTagName);\n          }\n        }\n      }\n\n      // Add new group to tag source object\n      tagSource.TagGroups.push(tagGroup);\n    }\n  });\n}\n\nfunction makeFiles4Download(tagSource: eidosConfig.TagSource, dataSources: eidosConfig.DataSource[]) {\n  const downloadDiv = document.getElementById(\"downloads\");\n\n  // Delete existing links if exist\n  while (downloadDiv.firstChild) {\n    //The list is LIVE so it will re-index each call\n    downloadDiv.removeChild(downloadDiv.firstChild);\n  }\n\n  /** This will add <a> elements in the div section */\n  const makeFileDownLink = function (data, name: string, dlDiv: HTMLElement) {\n    let blobData = new Blob([JSON.stringify(data)], { type: \"text/plain\" });\n\n    let dlLink = document.createElement(\"a\");\n    dlLink.text = `Download ${name}.json`;\n    dlLink.style.display = \"block\";\n    dlLink.download = `${name}.json`;\n    let newURL = URL.createObjectURL(blobData);\n    dlLink.href = newURL;\n\n    // Add element to parent div\n    dlDiv.appendChild(dlLink);\n  };\n\n  // Call to create single Tag Source file links\n  makeFileDownLink(tagSource, `TS ${tagSource[\"Name\"]}`, downloadDiv);\n\n  for (let dataSource of dataSources) {\n    let dsName = dataSource[\"Name\"];\n    makeFileDownLink(dataSource, `${dsName}`, downloadDiv);\n  }\n\n  // -------------------\n  // Make TEXT file link\n  /*   \n    let makeJSONDownLinkText = function(data, name) {\n    let blobData = new Blob([data], { type: \"text/plain\" });\n\n    let newURL = null;\n    let dlLink = document.createElement(\"a\");\n    dlLink.text = `Download ${name}`;\n    dlLink.id = `logic_${name}`;\n    dlLink.style.display = \"block\";\n    dlLink.download = `Logic ${name}.txt`;\n    newURL = window.URL.createObjectURL(blobData);\n    dlLink.href = newURL;\n\n    // Add element to parent div\n    dlDiv.appendChild(dlLink);\n  };\n\n  // Finally combine all logic sources into 1 object\n  let fullString = \"\";\n\n  for (let logic of logicSources) {\n    fullString = fullString + \"// SECTION: \" + logic.Name + String.fromCharCode(13);\n    fullString = fullString + logic.Logic + String.fromCharCode(13);\n  } */\n}\n"],"names":["___HTML_LOADER_IMPORT_0___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","TagGroup","constructor","name","Name","Type","Tags","Array","addNumericTag","type","address","newTag","Address","push","addStringTag","Length","addBoolTag","bitAddress","BitAddress","TagSource","TagGroups","DataChannel","tag","Tag","addValueDictionary","valueDictionary","ValueDictionary","DataSource","UseLegacyDataTypes","sourceType","tagSource","serverAddress","dbName","table","ServerAddress","ServerPort","Database","Table","DataChannels","MetadataChannels","addDefaultShiftData","ShiftSchedule","Shifts","Start","End","addShiftSchedule","shiftSchedule","JSON","parse","addDataChannel","valueDict","dataChannel","addMetadataChannel","addToLog","elementId","logText","getElementById","innerHTML","stringify","selectNavMenu","navElemId","paneltoShowId","linkElems","querySelectorAll","console","log","forEach","link","id","className","panel","style","display","Office","onReady","info","host","HostType","Excel","onclick","addMapSheet","makeConfigs","CONFIG_SHEET","CONFIG_RANGE","DATASOURCE_TABLE","TAGMAP_PREFIX","DATATYPES","LOG_ELEMENT","TagNameFormat","async","excelSheetName","excelRangeName","run","configSheet","context","workbook","worksheets","getItemOrNullObject","sync","isNullObject","sheet","add","configCells","getRange","values","format","autofitColumns","datasourceTable","tables","getHeaderRowRange","getDataBodyRange","addConfigSheet","configRange","load","TagSourceName","DatabaseName","LogicType","getConfigData","then","configData","tagsource","eidosConfig","makeTagSourceObject","excelTableName","datasources","getItem","headerRange","bodyRange","headerValues","bodyValues","tableColumnMap","item","index","element","metadataChannels","staticmetaChannels","newDatasource","metadataObj","staticdataObj","StaticMetadata","error","makeDatasourceObjects","dataSources","sheets","items","includes","loadData","count","tableData","getItemAt","sheetConfig","baseTagName","tagGroup","row","tagData","Byte","Bit","ChannelName","TagType","PlcTagName","PlcTagIndex","PlcTagBit","IsBool","Number","isFinite","sTagName","Integer","findIndex","populateSources","downloadDiv","firstChild","removeChild","makeFileDownLink","data","dlDiv","blobData","Blob","dlLink","createElement","text","download","newURL","URL","createObjectURL","appendChild","dataSource","makeFiles4Download","tagNamePrefix","PROPS_H1","horizontalAlignment","font","bold","size","fill","color","PROPS_H2","newSheetName","datamapTable","showBandedRows","bodyData","rows","getColumn","dataValidation","rule","list","inCellDropDown","source","activate","tabColor","set","colWidths","columnWidth","eidosLabelCell","merge","tagArrayTypeCell","plcLabelCell"],"sourceRoot":""}